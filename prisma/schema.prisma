// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PokemonBase {
  id        Int    @id
  name      String @unique
  gen       Int
  types     String[]
  stats     Json   // {hp, atk, def, spa, spd, spe}
  abilities String[]
  spriteUrl String?
  moves     MoveBaseOnPokemon[]
  evGuides  EVTrainingGuide[]
  
  @@map("pokemon_base")
}

model MoveBase {
  id        Int    @id
  name      String @unique
  type      String
  category  String // Physical / Special / Status
  power     Int?
  accuracy  Int?
  moves     MoveBaseOnPokemon[]
  
  @@map("move_base")
}

model MoveBaseOnPokemon {
  id          Int    @id @default(autoincrement())
  pokemonId   Int
  moveId      Int
  learnMethod String // level-up, tm, egg, tutor
  level       Int?
  pokemon     PokemonBase @relation(fields: [pokemonId], references: [id])
  move        MoveBase    @relation(fields: [moveId], references: [id])
  
  @@map("move_base_on_pokemon")
}

model EVTrainingGuide {
  id        Int    @id @default(autoincrement())
  pokemonId Int
  spread    Json   // ví dụ: {hp:4, atk:252, spe:252}
  strategy  String // Offensive sweeper, Tank, Balanced...
  pokemon   PokemonBase @relation(fields: [pokemonId], references: [id])
  
  @@map("ev_training_guide")
}

model Format {
  id        Int       @id @default(autoincrement())
  name      String
  description String?
  rulesets  Ruleset[]
  
  @@map("format")
}

model Ruleset {
  id        Int    @id @default(autoincrement())
  formatId  Int
  name      String
  version   String
  active    Boolean
  entries   RulesetEntry[]
  changelogs Changelog[]
  format    Format @relation(fields: [formatId], references: [id])
  
  @@map("ruleset")
}

model RulesetEntry {
  id         Int    @id @default(autoincrement())
  rulesetId  Int
  entityType String // Pokemon, Move, Item
  entityName String
  status     String // Allowed, Banned, Conditional
  ruleset    Ruleset @relation(fields: [rulesetId], references: [id])
  
  @@map("ruleset_entry")
}

model Changelog {
  id        Int      @id @default(autoincrement())
  rulesetId Int
  message   String
  createdAt DateTime @default(now())
  ruleset   Ruleset  @relation(fields: [rulesetId], references: [id])
  
  @@map("changelog")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String?
  name      String?
  image     String?
  role      String    @default("viewer") // viewer, mod, admin
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  auditLogs AuditLog[]
  
  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_token")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    String
  action    String
  details   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("audit_log")
}